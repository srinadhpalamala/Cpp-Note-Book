# Develop a C++ program to implement List and Vector containers and perform basic operationssuch as 
insertion, deletion, traversal. 
PROGRAM:
#include <iostream> 
#include <list> 
#include <vector> 
using namespace std; 
int main() { 
    list<int> myList; 
    myList.push_back(10); 
    myList.push_back(20); 
    myList.push_front(5); 
    cout << "List: "; 
    for (int x : myList) 
        cout << x << " "; 
    cout << endl; 
    myList.pop_front(); 
    myList.remove(20); 
    cout << "List after deletion: "; 
    for (int x : myList) 
        cout << x << " "; 
    cout << endl; 
 
    vector<int> myVector; 
    myVector.push_back(100); 
    myVector.push_back(200); 
    myVector.insert(myVector.begin(), 50); 
    cout << "Vector: "; 
    for (int x : myVector) 
        cout << x << " "; 
    cout << endl;
  myVector.erase(myVector.begin()); 
    myVector.pop_back(); 
    cout << "Vector after deletion: "; 
    for (int x : myVector) 
        cout << x << " "; 
    cout << endl; 
 
     return 0; 
} 
 
Output: 
List: 5 10 20  
List after deletion: 10  
Vector: 50 100 200  
Vector after deletion: 100 


# Implement Deque in C++ and demonstrate basic operations. 
PROGRAM:
#include <iostream> 
using namespace std; 
class SimpleDeque { 
    int arr[10]; 
    int front, rear; 
public: 
    SimpleDeque() { 
        front = -1; 
        rear = -1; 
    }
void insertRear(int x) { 
        if (rear == 9) { 
            cout << "Deque is full at rear\n"; 
            return; 
        } 
        if (front == -1) front = 0; 
        arr[++rear] = x; 
        cout << "Inserted " << x << " at rear\n"; 
    } 
    void insertFront(int x) { 
        if (front <= 0) { 
            cout << "Cannot insert at front\n"; 
            return; 
        } 
        arr[--front] = x; 
        cout << "Inserted " << x << " at front\n"; 
    } 
    void deleteFront() { 
        if (isEmpty()) { 
            cout << "Deque is empty\n"; 
            return; 
        } 
        cout << "Deleted " << arr[front] << " from front\n"; 
        front++; 
        if (front > rear) front = rear = -1; 
    } 
    void deleteRear() { 
        if (isEmpty()) { 
            cout << "Deque is empty\n"; 
            return;
 } 
        cout << "Deleted " << arr[rear] << " from rear\n"; 
        rear--; 
        if (rear < front) front = rear = -1; 
    } 
    void display() { 
        if (isEmpty()) { 
            cout << "Deque is empty\n"; 
            return; 
        } 
        cout << "Deque: "; 
        for (int i = front; i <= rear; i++) 
            cout << arr[i] << " "; 
        cout << "\n"; 
    } 
    bool isEmpty() { 
        return front == -1 || front > rear; 
    } 
}; 
 
int main() { 
    SimpleDeque dq; 
    dq.insertRear(10); 
    dq.insertRear(20); 
    dq.insertRear(30); 
    dq.display(); 
    dq.deleteFront(); 
    dq.display(); 
    dq.insertFront(5); 
    dq.display();
   dq.deleteRear(); 
    dq.display(); 
    dq.deleteFront(); 
    dq.deleteFront(); 
    dq.deleteFront(); // Should show empty 
    dq.display(); 
    return 0; 
}
OUTPUT:
Inserted 10 at rear 
Inserted 20 at rear 
Inserted 30 at rear 
Deque: 10 20 30  
Deleted 10 from front 
Deque: 20 30  
Inserted 5 at front 
Deque: 5 20 30  
Deleted 30 from rear 
Deque: 5 20  
Deleted 5 from front 
Deleted 20 from front 
Deque is empty 
Deque is empty 


# Implement Map and demonstrate operations such as insertion, deletion, access, 
and searching
PROGRAM:
#include <iostream> 
#include <map> 
using namespace std; 
 
int main() { 
    map<string, int> m;
    m["apple"] = 10; 
    m["banana"] = 20; 
    m["cherry"] = 30; 
 
    cout << m["apple"] << endl; 
    if (m.find("banana") != m.end()) 
        cout << "Found banana: " << m["banana"] << endl; 
 
    m.erase("cherry"); 
    for (auto it : m) 
        cout << it.first << " " << it.second << endl; 
 
    return 0; 
} 
OUTPUT: 
10 
Found banana: 20 
apple 10 
banana 20.

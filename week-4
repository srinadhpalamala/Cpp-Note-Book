# Create a C++ program that demonstrates function overloading by defining multiple 
functions with the same name but different parameter types or counts.
PROGRAM:
#include<iostream>
#include<string>
using namespace std;
void printdetails(string name,int rollnumber){
cout<<"\n Student Details:\n ";
cout<<"Name: "<<name<<"\n Roll Number: "<<rollnumber<<endl;
}
void printdetails(string name, string subject){
cout<<"\n Teacher Details: ";
cout<<"Name: "<<name<<"\n subject: "<<subject<<endl;
}
void printdetails(string coursename,float duration)
{
cout<<"\n Course Details:\n";
cout<<"Course name: "<<coursename<<"\n duration"<<duration<<"months"<<endl;
}
int main()
{
int choice;
cout<<"Select Option:\n";
cout<<"1. print student details\n";
cout<<"2. print teacher details\n";
cout<<"3. print course details\n";
cout<<"Enter your choice(1-3): ";
cin>> choice;
cin.ignore();
if(choice==1)
{
string name;
int roll;
cout<<"enter student name: ";
getline(cin,name);
cout<<"enter roll no: ";
cin>>roll;
printdetails(name,roll);
}
else if(choice==2){
string name,subject;
cout<<"enter teacher name: ";
getline(cin,name);
cout<<"enter subject";
getline(cin,subject);
printdetails(name,subject);

}
else if(choice==3)
{
string course ;
float duration;
cout<<"enter course name: ";
getline(cin,course);
cout<<"enter duration (in months)";
cin>>duration;
printdetails(course,duration);
}
else{
cout<<"invalid choice!"<<endl;
}
return 0;
}

OUTPUT:
Select Option:
1. print student details
2. print teacher details
3. print course details
Enter your choice(1-3): 1
enter student name: srinadh
enter roll no: 318 
Student Details:
Name: srinadh
Roll Number: 318

Output 2:
Select Option:
1. print student details
2. print teacher details
3. print course details
Enter your choice(1-3): 2
enter teacher name: Hemalatha
enter subject:Chemistry
 
Teacher Details: Name: Hemalatha
subject: Chemistry

Output 3:
Select Option:
1. print student details
2. print teacher details
3. print course details
Enter your choice(1-3): 3
enter course name: c++
enter duration (in months): 7months
 Course Details:
Course name: c++
Duration: 7months


# Develop a C++ program that illustrates the use of default arguments in functions.
PROGRAM:
Program:
#include <iostream>
using namespace std;
void greet(string name, string greeting = "Hello", int times = 1) {
    for (int i = 0; i < times; ++i) {
        cout << greeting << ", " << name << "!" << endl;
    }
}
int main() {
    string name, greeting;
    int choice, times;
    
    cout << "Enter your name: ";
    getline(cin, name);
    cout << "\nChoose Greeting Type:\n";
    cout << "1. Just Name (use default greeting and times)\n";
    cout << "2. Name and Custom Greeting (use default times)\n";
    cout << "3. Name, Custom Greeting, and Times\n";
    cout << "Enter your choice (1-3): ";
    cin >> choice;
    cin.ignore(); 
    if (choice == 1) {
        greet(name); 
    }
    else if (choice == 2) {
        cout << "Enter your custom greeting (e.g., Hi, Welcome, Good Morning): ";
        getline(cin, greeting);
        greet(name, greeting);  
    }
    else if (choice == 3) {
       
 cout << "Enter your custom greeting: ";
        getline(cin, greeting);
        cout << "How many times do you want the greeting? ";
        cin >> times;
        greet(name, greeting, times); 
    }
    else {
        cout << "Invalid choice!" << endl;
    }
 
    return 0;
}


OUTPUT:
Enter your name: srinadh 
Choose Greeting Type:
1. Just Name (use default greeting and times)
2. Name and Custom Greeting (use default times)
3. Name, Custom Greeting, and Times
Enter your choice (1-3): 3
Enter your custom greeting: Happy Birthday
How many times do you want the greeting? 5
Happy Birthday, srinadh!
Happy Birthday, srinadh!
Happy Birthday, srinadh!
Happy Birthday, srinadh!
Happy Birthday, srinadh!

 
# Create a C++ program that uses a friend function to access the private data of a class.
PROGRAM:
#include <iostream>
#include <string>
using namespace std;
class BankAccount {

private:
    string accountHolder;
    float balance;
public:
    BankAccount(string name, float amount) {
        accountHolder = name;
        balance = amount;
    }
    friend void showAccountDetails(BankAccount acc);
};
void showAccountDetails(BankAccount acc) {
    cout << "\n--- Account Details ---\n";
    cout << "Account Holder: " << acc.accountHolder << endl;
    cout << "Balance: ₹" << acc.balance << endl;
}
int main() {
    string name;
    float amount;
    cout << "Enter Account Holder Name: ";
    getline(cin, name);
    cout << "Enter Initial Balance: ₹";
   
 cin >> amount;
    BankAccount userAccount(name, amount);
    showAccountDetails(userAccount);
    return 0;
}

OUTPUT:
Enter Account Holder Name: Srinadh
Enter Initial Balance: ₹2000 
--- Account Details ---
Account Holder: Srinadh
Balance: ₹2000

 
